using UnityEngine;
using UnityEditor;
using System.IO;
using System.Linq;
using System.Text;

// code generated by chatgpt o1 preview
public abstract class PrefabEnumGenerator
{
    [MenuItem("Tools/Generate Prefab and Pool Enums")]
    public static void GeneratePrefabAndPoolEnums()
    {
        StringBuilder enumBuilder = new StringBuilder();

        string[] prefabPaths = AssetDatabase.FindAssets("t:Prefab", new[] { "Assets/Resources/Prefabs/Prefabs_Normal" })
            .Select(AssetDatabase.GUIDToAssetPath)
            .ToArray();

        enumBuilder.AppendLine("public enum PrefabType");
        enumBuilder.AppendLine("{");

        for (int i = 0; i < prefabPaths.Length; i++)
        {
            string prefabName = Path.GetFileNameWithoutExtension(prefabPaths[i]);
            enumBuilder.AppendLine($"    {SanitizeEnumName(prefabName)} = {i},");
        }

        enumBuilder.AppendLine("}");
        enumBuilder.AppendLine();

        string[] poolPaths = AssetDatabase.FindAssets("t:Prefab", new[] { "Assets/Resources/Prefabs/Prefabs_Pooled" })
            .Select(AssetDatabase.GUIDToAssetPath)
            .ToArray();

        enumBuilder.AppendLine("public enum PoolType");
        enumBuilder.AppendLine("{");

        for (int i = 0; i < poolPaths.Length; i++)
        {
            string poolName = Path.GetFileNameWithoutExtension(poolPaths[i]);
            enumBuilder.AppendLine($"    {SanitizeEnumName(poolName)} = {i},");
        }

        enumBuilder.AppendLine("}");

        string enumFilePath = "Assets/Scripts/Utils/PrefabType.cs";
        File.WriteAllText(enumFilePath, enumBuilder.ToString());
        AssetDatabase.Refresh();

        Debug.Log("The PrefabType and PoolType enums have been successfully created.");
    }

    private static string SanitizeEnumName(string name)
    {
        return string.Concat(name.Split(' '));
    }
}